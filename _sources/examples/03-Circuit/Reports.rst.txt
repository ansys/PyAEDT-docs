
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-Circuit\Reports.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-Circuit_Reports.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-Circuit_Reports.py:


Circuit: automatic report creation
----------------------------------
This example shows how you can use PyAEDT to create reports automatically using a JSON file.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports and set the local path to the path for PyAEDT.

.. GENERATED FROM PYTHON SOURCE LINES 11-26

.. code-block:: default


    # sphinx_gallery_thumbnail_path = 'Resources/spectrum_plot.png'
    import os

    import shutil
    from pyaedt import examples
    from pyaedt import generate_unique_folder_name

    import tempfile

    # Set local path to path for PyAEDT
    temp_folder = generate_unique_folder_name()
    project_path = examples.download_custom_reports(temp_folder)









.. GENERATED FROM PYTHON SOURCE LINES 27-30

Import main classes
~~~~~~~~~~~~~~~~~~~
Import the main classes that are needed: :class:`pyaedt.Desktop` and :class:`pyaedt.Circuit`.

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default


    from pyaedt import Circuit
    from pyaedt.generic.DataHandlers import json_to_dict








.. GENERATED FROM PYTHON SOURCE LINES 35-38

Launch AEDT
~~~~~~~~~~~
Launch AEDT 2022 R2 in graphical mode. This example uses SI units.

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default


    desktopVersion = "2022.2"








.. GENERATED FROM PYTHON SOURCE LINES 42-49

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. ``"PYAEDT_NON_GRAPHICAL"``` is needed to generate
documentation only.
You can set ``non_graphical`` either to ``True`` or ``False``.
The Boolean parameter ``new_thread`` defines whether to create a new instance
of AEDT or try to connect to an existing instance of it.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")
    NewThread = True








.. GENERATED FROM PYTHON SOURCE LINES 54-58

Launch AEDT with Circuit
~~~~~~~~~~~~~~~~~~~~~~~~
Launch AEDT with Circuit. The :class:`pyaedt.Desktop` class initializes AEDT
and starts the specified version in the specified mode.

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default


    cir = Circuit(projectname=os.path.join(project_path, 'CISPR25_Radiated_Emissions_Example22R1.aedtz'), non_graphical=non_graphical,
                  specified_version=desktopVersion)








.. GENERATED FROM PYTHON SOURCE LINES 63-70

Create spectrum report
~~~~~~~~~~~~~~~~~~~~~~
Create a spectrum report. You can use a JSON file to create a simple setup
or a fully customized one. The following code creates a simple setup and changes
the JSON file to customize it. In a spectrum report, you can add limitilines and
notes and edit axes, the grid, and the legend. You can create custom reports
in non-graphical mode in AEDT 2022 R2 and later.

.. GENERATED FROM PYTHON SOURCE LINES 70-76

.. code-block:: default


    report1 = cir.post.create_report_from_configuration(os.path.join(project_path,'Spectrum_CISPR_Basic.json'))

    if not non_graphical:
        report1_full = cir.post.create_report_from_configuration(os.path.join(project_path,'Spectrum_CISPR_Custom.json'))








.. GENERATED FROM PYTHON SOURCE LINES 77-83

Create transient report
~~~~~~~~~~~~~~~~~~~~~~~
Create a transient report. You can read and modify the JSON file
before running the script. The following code modifies the traces
before generating the report. You can create custom reports in non-graphical
mode in AEDT 2022 R2 and later.

.. GENERATED FROM PYTHON SOURCE LINES 83-94

.. code-block:: default


    if non_graphical:
        props = json_to_dict(os.path.join(project_path, 'Transient_CISPR_Basic.json'))
    else:
        props = json_to_dict(os.path.join(project_path, 'Transient_CISPR_Custom.json'))

    report2 = cir.post.create_report_from_configuration(input_dict=props, solution_name="NexximTransient")
    props["expressions"] = {"V(Battery)": {}, "V(U1_VDD)": {}}
    props["plot_name"] = "Battery Voltage"
    report3 = cir.post.create_report_from_configuration(input_dict=props, solution_name="NexximTransient")








.. GENERATED FROM PYTHON SOURCE LINES 95-100

Create eye diagram
~~~~~~~~~~~~~~~~~~
Create an eye diagram. If the JSON file contains an eye mask, you can create
an eye diagram and fully customize it. You can create custom reports in
non-graphical mode in AEDT 2022 R2 and later.

.. GENERATED FROM PYTHON SOURCE LINES 100-109

.. code-block:: default


    report4 = cir.post.create_report_from_configuration(os.path.join(project_path,'EyeDiagram_CISPR_Basic.json'))

    if not non_graphical:
        report4_full = cir.post.create_report_from_configuration(os.path.join(project_path,'EyeDiagram_CISPR_Custom.json'))

    if not non_graphical:
        cir.post.export_report_to_jpg(cir.working_directory, report4.plot_name)








.. GENERATED FROM PYTHON SOURCE LINES 110-113

Save project and close AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Save the project and close AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 113-117

.. code-block:: default


    cir.save_project()
    print("Project Saved in {}".format(cir.project_path))
    cir.release_desktop()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Project Saved in D:/Temp/PyAEDTExamples/custom_reports/

    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.482 seconds)


.. _sphx_glr_download_examples_03-Circuit_Reports.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Reports.py <Reports.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Reports.ipynb <Reports.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
