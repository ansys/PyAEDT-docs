
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-EDB\04_edb_parametrized_design.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-EDB_04_edb_parametrized_design.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-EDB_04_edb_parametrized_design.py:


EDB: fully parametrized design
------------------------------
This example shows how you can use HFSS 3D Layout to create and solve a parametric design.

.. GENERATED FROM PYTHON SOURCE LINES 8-12

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports, which includes importing the ``Hfss3dlayout`` object
and initializing it on version 2022 R2.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default


    from pyaedt import Edb
    from pyaedt.generic.general_methods import generate_unique_folder_name, generate_unique_name
    from pyaedt import Hfss3dLayout
    import os








.. GENERATED FROM PYTHON SOURCE LINES 19-22

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 26-29

Launch EDB
~~~~~~~~~~
Launch EDB.

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default


    aedb_path = os.path.join(generate_unique_folder_name(), generate_unique_name("pcb") + ".aedb")
    print(aedb_path)
    edb = Edb(edbpath=aedb_path, edbversion="2022.2")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    D:\Temp\pyaedt_prj_RGF\pcb_8Q56ZR.aedb




.. GENERATED FROM PYTHON SOURCE LINES 35-38

Define parameters
~~~~~~~~~~~~~~~~~
Define the parameters.

.. GENERATED FROM PYTHON SOURCE LINES 38-56

.. code-block:: default


    params = {"$ms_width": "0.4mm",
              "$sl_width": "0.2mm",
              "$ms_spacing": "0.2mm",
              "$sl_spacing": "0.1mm",
              "$via_spacing": "0.5mm",
              "$via_diam": "0.3mm",
              "$pad_diam": "0.6mm",
              "$anti_pad_diam": "0.7mm",
              "$pcb_len": "30mm",
              "$pcb_w": "5mm",
              "$x_size": "1.2mm",
              "$y_size": "1mm",
              "$corner_rad": "0.5mm"}

    for par_name in params:
        edb.add_design_variable(par_name, params[par_name])








.. GENERATED FROM PYTHON SOURCE LINES 57-60

Define stackup layers
~~~~~~~~~~~~~~~~~~~~~
Define the stackup layers from bottom to top.

.. GENERATED FROM PYTHON SOURCE LINES 60-79

.. code-block:: default



    layers = [{"name": "bottom", "layer_type": "signal", "thickness": "35um", "material": "copper"},
              {"name": "diel_3", "layer_type": "dielectric", "thickness": "275um", "material": "FR4_epoxy"},
              {"name": "sig_2", "layer_type": "signal", "thickness": "35um", "material": "copper"},
              {"name": "diel_2", "layer_type": "dielectric", "thickness": "275um", "material": "FR4_epoxy"},
              {"name": "sig_1", "layer_type": "signal", "thickness": "35um", "material": "copper"},
              {"name": "diel_1", "layer_type": "dielectric", "thickness": "275um", "material": "FR4_epoxy"},
              {"name": "top", "layer_type": "signal", "thickness": "35um", "material": "copper"}]


    # Create EDB stackup.
    # Bottom layer
    prev = None
    for layer in layers:
        edb.stackup.add_layer(layer["name"], base_layer=prev, layer_type=layer["layer_type"], thickness=layer["thickness"],
                                              material=layer["material"])
        prev = layer["name"]








.. GENERATED FROM PYTHON SOURCE LINES 80-83

Create padstack for signal via
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a parametrized padstack for the signal via.

.. GENERATED FROM PYTHON SOURCE LINES 83-98

.. code-block:: default


    signal_via_padstack = "automated_via"
    edb.core_padstack.create_padstack(
                padstackname=signal_via_padstack,
                holediam="$via_diam",
                paddiam="$pad_diam",
                antipaddiam="",
                startlayer="top",
                endlayer="bottom",
                antipad_shape="Bullet",
                x_size="$x_size",
                y_size="$y_size",
                corner_radius="$corner_rad",
            )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'automated_via'



.. GENERATED FROM PYTHON SOURCE LINES 99-102

Assign net names
~~~~~~~~~~~~~~~~
# Assign net names. There are only two signal nets.

.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default


    net_p = "p"
    net_n = "n"








.. GENERATED FROM PYTHON SOURCE LINES 107-110

Place signal vias
~~~~~~~~~~~~~~~~~
Place signal vias.

.. GENERATED FROM PYTHON SOURCE LINES 110-212

.. code-block:: default


    edb.core_padstack.place_padstack(
                position=["$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing)/2"],
                definition_name=signal_via_padstack,
                net_name=net_p,
                via_name="",
                rotation=90.0,
                fromlayer=layers[-1]["name"],
                tolayer=layers[0]["name"],)

    edb.core_padstack.place_padstack(
                position=["2*$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing)/2"],
                definition_name=signal_via_padstack,
                net_name=net_p,
                via_name="",
                rotation=90.0,
                fromlayer=layers[-1]["name"],
                tolayer=layers[0]["name"],)

    edb.core_padstack.place_padstack(
                position=["$pcb_len/3", "-($ms_width+$ms_spacing+$via_spacing)/2"],
                definition_name=signal_via_padstack,
                net_name=net_n,
                via_name="",
                rotation=-90.0,
                fromlayer=layers[-1]["name"],
                tolayer=layers[0]["name"],)

    edb.core_padstack.place_padstack(
                position=["2*$pcb_len/3", "-($ms_width+$ms_spacing+$via_spacing)/2"],
                definition_name=signal_via_padstack,
                net_name=net_n,
                via_name="",
                rotation=-90.0,
                fromlayer=layers[-1]["name"],
                tolayer=layers[0]["name"],)


    # ###############################################################################
    # Draw parametrized traces
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    # Draw parametrized traces.
    # Trace the width and the routing (Microstrip-Stripline-Microstrip).
    # Applies to both p and n nets.

    width = ["$ms_width", "$sl_width", "$ms_width"]                       # Trace width, n and p
    route_layer = [layers[-1]["name"], layers[4]["name"], layers[-1]["name"]]    # Routing layer, n and p

    # Define points for three traces in the "p" net

    points_p = [
               [["0.0", "($ms_width+$ms_spacing)/2"],
                ["$pcb_len/3-2*$via_spacing", "($ms_width+$ms_spacing)/2"],
                ["$pcb_len/3-$via_spacing", "($ms_width+$ms_spacing+$via_spacing)/2"],
                ["$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing)/2"],
               ],
               [["$pcb_len/3", "($ms_width+$sl_spacing+$via_spacing)/2"],
                ["$pcb_len/3+$via_spacing", "($ms_width+$sl_spacing+$via_spacing)/2"],
                ["$pcb_len/3+2*$via_spacing", "($sl_width+$sl_spacing)/2"],
                ["2*$pcb_len/3-2*$via_spacing", "($sl_width+$sl_spacing)/2"],
                ["2*$pcb_len/3-$via_spacing", "($ms_width+$sl_spacing+$via_spacing)/2"],
                ["2*$pcb_len/3", "($ms_width+$sl_spacing+$via_spacing)/2"],
               ],
               [["2*$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing)/2"],
                ["2*$pcb_len/3+$via_spacing", "($ms_width+$ms_spacing+$via_spacing)/2"],
                ["2*$pcb_len/3+2*$via_spacing", "($ms_width+$ms_spacing)/2"],
                ["$pcb_len", "($ms_width+$ms_spacing)/2"],
               ],
              ]

    # Define points for three traces in the "n" net

    points_n = [
              [["0.0", "-($ms_width+$ms_spacing)/2"],
               ["$pcb_len/3-2*$via_spacing", "-($ms_width+$ms_spacing)/2"],
               ["$pcb_len/3-$via_spacing", "-($ms_width+$ms_spacing+$via_spacing)/2"],
               ["$pcb_len/3", "-($ms_width+$ms_spacing+$via_spacing)/2"],
              ],
              [["$pcb_len/3", "-($ms_width+$sl_spacing+$via_spacing)/2"],
               ["$pcb_len/3+$via_spacing", "-($ms_width+$sl_spacing+$via_spacing)/2"],
               ["$pcb_len/3+2*$via_spacing", "-($ms_width+$sl_spacing)/2"],
               ["2*$pcb_len/3-2*$via_spacing", "-($ms_width+$sl_spacing)/2"],
               ["2*$pcb_len/3-$via_spacing", "-($ms_width+$sl_spacing+$via_spacing)/2"],
               ["2*$pcb_len/3", "-($ms_width+$sl_spacing+$via_spacing)/2"],
              ],
              [["2*$pcb_len/3", "-($ms_width+$ms_spacing+$via_spacing)/2"],
               ["2*$pcb_len/3 + $via_spacing", "-($ms_width+$ms_spacing+$via_spacing)/2"],
               ["2*$pcb_len/3 + 2*$via_spacing", "-($ms_width+$ms_spacing)/2"],
               ["$pcb_len", "-($ms_width + $ms_spacing)/2"],
              ],
             ]
    # ###############################################################################
    # Add traces to EDB
    # ~~~~~~~~~~~~~~~~~
    # Add traces to EDB.

    trace_p = []
    trace_n = []
    for n in range(len(points_p)):
        trace_p.append(edb.core_primitives.create_trace(points_p[n], route_layer[n], width[n], net_p, "Flat", "Flat"))
        trace_n.append(edb.core_primitives.create_trace(points_n[n], route_layer[n], width[n], net_n, "Flat", "Flat"))








.. GENERATED FROM PYTHON SOURCE LINES 213-216

Create wave ports
~~~~~~~~~~~~~~~~~
Create wave ports:

.. GENERATED FROM PYTHON SOURCE LINES 216-224

.. code-block:: default


    edb.core_hfss.create_differential_wave_port(trace_p[0].id, ["0.0", "($ms_width+$ms_spacing)/2"],
                                                trace_n[0].id, ["0.0", "-($ms_width+$ms_spacing)/2"],
                                                "wave_port_1")
    edb.core_hfss.create_differential_wave_port(trace_p[2].id, ["$pcb_len", "($ms_width+$ms_spacing)/2"],
                                                trace_n[2].id, ["$pcb_len", "-($ms_width + $ms_spacing)/2"],
                                                "wave_port_2")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ('wave_port_2', <pyaedt.edb_core.edb_data.sources.ExcitationDifferential object at 0x000001FD988CDD00>)



.. GENERATED FROM PYTHON SOURCE LINES 225-228

Draw ground polygons
~~~~~~~~~~~~~~~~~~~~
Draw ground polygons.

.. GENERATED FROM PYTHON SOURCE LINES 228-269

.. code-block:: default


    gnd_poly = [[0.0, "-$pcb_w/2"],
                ["$pcb_len", "-$pcb_w/2"],
                ["$pcb_len", "$pcb_w/2"],
                [0.0, "$pcb_w/2"]]
    gnd_shape = edb.core_primitives.Shape("polygon", points=gnd_poly)

    # Void in ground for traces on the signal routing layer

    void_poly = [["$pcb_len/3", "-($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2-$via_spacing/2"],
                 ["$pcb_len/3 + $via_spacing", "-($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2-$via_spacing/2"],
                 ["$pcb_len/3 + 2*$via_spacing",
                 "-($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2"],
                 ["2*$pcb_len/3 - 2*$via_spacing",
                 "-($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2"],
                 ["2*$pcb_len/3 - $via_spacing",
                 "-($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2-$via_spacing/2"],
                 ["2*$pcb_len/3", "-($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2-$via_spacing/2"],
                 ["2*$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2+$via_spacing/2"],
                 ["2*$pcb_len/3 - $via_spacing", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2+$via_spacing/2"],
                 ["2*$pcb_len/3 - 2*$via_spacing", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2"],
                 ["$pcb_len/3 + 2*$via_spacing", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2"],
                 ["$pcb_len/3 + $via_spacing", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2+$via_spacing/2"],
                 ["$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2+$via_spacing/2"],
                 ["$pcb_len/3", "($ms_width+$ms_spacing+$via_spacing+$anti_pad_diam)/2"]]

    void_shape = edb.core_primitives.Shape("polygon", points=void_poly)

    # Add ground layers

    for layer in layers[1:-1]:

        # add void if the layer is the signal routing layer.
        void = [void_shape] if layer["name"] == route_layer[1] else []

        edb.core_primitives.create_polygon(main_shape=gnd_shape,
                                           layer_name=layer["name"],
                                           voids=void,
                                           net_name="gnd")









.. GENERATED FROM PYTHON SOURCE LINES 270-273

Plot EDB
~~~~~~~~
Plot EDB.

.. GENERATED FROM PYTHON SOURCE LINES 273-276

.. code-block:: default


    edb.core_nets.plot(None)




.. image-sg:: /examples/00-EDB/images/sphx_glr_04_edb_parametrized_design_001.png
   :alt: Cell_FXFB93
   :srcset: /examples/00-EDB/images/sphx_glr_04_edb_parametrized_design_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 277-280

Save EDB
~~~~~~~~
Save EDB.

.. GENERATED FROM PYTHON SOURCE LINES 280-285

.. code-block:: default


    edb.save_edb()
    edb.close_edb()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 286-289

Open EDB in AEDT
~~~~~~~~~~~~~~~~
Open EDB in AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 289-292

.. code-block:: default


    h3d = Hfss3dLayout(projectname=os.path.join(aedb_path, "edb.def"), specified_version="2022.2", non_graphical=non_graphical)








.. GENERATED FROM PYTHON SOURCE LINES 293-296

Add HFSS simulation setup
~~~~~~~~~~~~~~~~~~~~~~~~~
Add HFSS simulation setup.

.. GENERATED FROM PYTHON SOURCE LINES 296-313

.. code-block:: default


    setup = h3d.create_setup()
    h3d.create_linear_count_sweep(
        setupname=setup.name,
        unit="GHz",
        freqstart=0,
        freqstop=10,
        num_of_freq_points=1001,
        sweepname="sweep1",
        sweep_type="Interpolating",
        interpolation_tol_percent=1,
        interpolation_max_solutions=255,
        save_fields=False,
        use_q3d_for_dc=False,
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.SetupTemplates.SweepHFSS3DLayout object at 0x000001FD9875B430>



.. GENERATED FROM PYTHON SOURCE LINES 314-317

Start HFSS solver
~~~~~~~~~~~~~~~~~
Start the HFSS solver by uncommenting the ``h3d.analyze_nominal()`` command.

.. GENERATED FROM PYTHON SOURCE LINES 317-322

.. code-block:: default


    # h3d.analyze_nominal()

    h3d.release_desktop()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 323-327

Note that the ground nets are only connected to each other due
to the wave ports. The problem with poor grounding can be seen in the
S-parameters. Try to modify this script to add ground vias and eliminate
the resonance.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.055 seconds)


.. _sphx_glr_download_examples_00-EDB_04_edb_parametrized_design.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04_edb_parametrized_design.py <04_edb_parametrized_design.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04_edb_parametrized_design.ipynb <04_edb_parametrized_design.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
