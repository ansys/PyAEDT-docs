
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\07-TwinBuilder\02-Wiring_A_Rectifier.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_07-TwinBuilder_02-Wiring_A_Rectifier.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_07-TwinBuilder_02-Wiring_A_Rectifier.py:


Twin Builder: wiring a rectifier with a capacitor filter
---------------------------------------------------------
This example shows how you can use PyAEDT to create a Twin Builder design
and run a Twin Builder time-domain simulation.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Perform required imputs
~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 12-19

.. code-block:: default


    import os
    import math
    import matplotlib.pyplot as plt
    from pyaedt import TwinBuilder
    from pyaedt import generate_unique_project_name








.. GENERATED FROM PYTHON SOURCE LINES 20-29

Select version and set launch options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Select the Twin Builder version and set the launch options. The following code
launches Twin Builder 2022 R2 in graphical mode.

You can change the Boolean parameter ``non_graphical`` to ``True`` to launch
Twin Builder in non-graphical mode. You can also change the Boolean parameter
``new_thread`` to ``False`` to launch Twin Builder in an existing AEDT session
if one is running.

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default


    desktop_version = "2022.2"
    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")
    new_thread = True








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Launch Twin Builder
~~~~~~~~~~~~~~~~~~~
Launch Twin Builder using an implicit declaration and add a new design with
a default setup.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default


    tb = TwinBuilder(projectname=generate_unique_project_name(),specified_version=desktop_version, non_graphical=non_graphical, new_desktop_session=new_thread)








.. GENERATED FROM PYTHON SOURCE LINES 43-46

Create components for bridge rectifier
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create components for a bridge rectifier with a capacitor filter.

.. GENERATED FROM PYTHON SOURCE LINES 46-74

.. code-block:: default

 
    # Define the grid distance for ease in calculations.

    G = 0.00254

    # Create an AC sinosoidal source component.

    source = tb.modeler.schematic.create_voltage_source("V_AC", "ESINE", 100, 50, [-1 * G, 0])

    # Create the four diodes of the bridge rectifier.

    diode1 = tb.modeler.schematic.create_diode("D1", [10 * G, 6 * G], 3 * math.pi / 2)
    diode2 = tb.modeler.schematic.create_diode("D2", [20 * G, 6 * G], 3 * math.pi / 2)
    diode3 = tb.modeler.schematic.create_diode("D3", [10 * G, -4 * G], 3 * math.pi / 2)
    diode4 = tb.modeler.schematic.create_diode("D4", [20 * G, -4 * G], 3 * math.pi / 2)

    # Create a capacitor filter.

    capacitor = tb.modeler.schematic.create_capacitor("C_FILTER", 1e-6, [29 * G, -10 * G])

    # Create a load resistor.

    resistor = tb.modeler.schematic.create_resistor("RL", 100000, [39 * G, -10 * G])

    # Create a ground.

    gnd = tb.modeler.components.create_gnd([5 * G, -16 * G])








.. GENERATED FROM PYTHON SOURCE LINES 75-78

Connect components
~~~~~~~~~~~~~~~~~~
Connect components with wires.

.. GENERATED FROM PYTHON SOURCE LINES 78-105

.. code-block:: default


    # Wire the diode bridge.

    tb.modeler.schematic.create_wire([diode1.pins[0].location, diode3.pins[0].location])
    tb.modeler.schematic.create_wire([diode2.pins[1].location, diode4.pins[1].location])
    tb.modeler.schematic.create_wire([diode1.pins[1].location, diode2.pins[0].location])
    tb.modeler.schematic.create_wire([diode3.pins[1].location, diode4.pins[0].location])

    # Wire the AC source.

    tb.modeler.schematic.create_wire([source.pins[1].location, [0, 10 * G], [15 * G, 10 * G], [15 * G, 5 * G]])
    tb.modeler.schematic.create_wire([source.pins[0].location, [0, -10 * G], [15 * G, -10 * G], [15 * G, -5 * G]])

    # Wire the filter capacitor and load resistor.

    tb.modeler.schematic.create_wire([resistor.pins[0].location, [40 * G, 0], [22 * G, 0]])
    tb.modeler.schematic.create_wire([capacitor.pins[0].location, [30 * G, 0]])

    # Wire the ground.

    tb.modeler.schematic.create_wire([resistor.pins[1].location, [40 * G, -15 * G], gnd.pins[0].location])
    tb.modeler.schematic.create_wire([capacitor.pins[1].location, [30 * G, -15 * G]])
    tb.modeler.schematic.create_wire([gnd.pins[0].location, [5 * G, 0], [8 * G, 0]])

    # Zoom to fit the schematic
    tb.modeler.zoom_to_fit()








.. GENERATED FROM PYTHON SOURCE LINES 106-109

Parametrize transient setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Parametrize the default transient setup by setting the end time.

.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: default


    tb.set_end_time("100ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 113-116

Solve transient setup
~~~~~~~~~~~~~~~~~~~~~~~~~
Solve the transient setup.

.. GENERATED FROM PYTHON SOURCE LINES 116-120

.. code-block:: default


    tb.analyze_setup("TR")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 121-126

Get report data and plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get report data and plot it using Matplotlib. The following code gets and plots
the values for the voltage on the pulse voltage source and the values for the
voltage on the capacitor in the RC circuit.

.. GENERATED FROM PYTHON SOURCE LINES 126-140

.. code-block:: default


    E_Value = "V_AC.V"
    x = tb.post.get_solution_data(E_Value, "TR", "Time")
    plt.plot(x.intrinsics["Time"], x.data_real(E_Value))

    R_Value = "RL.V"
    x = tb.post.get_solution_data(R_Value, "TR", "Time")
    plt.plot(x.intrinsics["Time"], x.data_real(R_Value))

    plt.grid()
    plt.xlabel("Time")
    plt.ylabel("AC to DC Conversion using Rectifier")
    plt.show()




.. image-sg:: /examples/07-TwinBuilder/images/sphx_glr_02-Wiring_A_Rectifier_001.png
   :alt: 02 Wiring A Rectifier
   :srcset: /examples/07-TwinBuilder/images/sphx_glr_02-Wiring_A_Rectifier_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 141-145

Close Twin Builder
~~~~~~~~~~~~~~~~~~
After the simulation is completed, you can close Twin Builder or release it.
All methods provide for saving the project before closing.

.. GENERATED FROM PYTHON SOURCE LINES 145-148

.. code-block:: default


    if os.name != "posix":
        tb.release_desktop()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.725 seconds)


.. _sphx_glr_download_examples_07-TwinBuilder_02-Wiring_A_Rectifier.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-Wiring_A_Rectifier.py <02-Wiring_A_Rectifier.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-Wiring_A_Rectifier.ipynb <02-Wiring_A_Rectifier.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
