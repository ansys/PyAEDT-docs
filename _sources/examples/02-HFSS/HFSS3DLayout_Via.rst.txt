
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-HFSS\HFSS3DLayout_Via.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-HFSS_HFSS3DLayout_Via.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-HFSS_HFSS3DLayout_Via.py:


HFSS 3D Layout: parametric via analysis
---------------------------------------
This example shows how you can use HFSS 3D Layout to create and solve a
parametric via analysis.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required inports.

.. GENERATED FROM PYTHON SOURCE LINES 12-16

.. code-block:: default


    from pyaedt import Hfss3dLayout
    import os








.. GENERATED FROM PYTHON SOURCE LINES 17-22

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. ``"PYAEDT_NON_GRAPHICAL"`` is needed to generate
documentation only.
You can set ``non_graphical`` either to ``True`` or ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 26-29

Launch AEDT
~~~~~~~~~~~
Launch AEDT 2022 R2 in graphical mode.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default


    h3d = Hfss3dLayout(specified_version="2022.2", new_desktop_session=True, non_graphical=non_graphical)








.. GENERATED FROM PYTHON SOURCE LINES 33-36

Set up variables
~~~~~~~~~~~~~~~~
Set up all parametric variables to use in the layout.

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: default


    h3d["viatotrace"] = "5mm"
    h3d["viatovia"] = "10mm"
    h3d["w1"] = "1mm"
    h3d["sp"] = "0.5mm"
    h3d["len"] = "50mm"








.. GENERATED FROM PYTHON SOURCE LINES 44-47

Add stackup layers
~~~~~~~~~~~~~~~~~~
Add stackup layers.

.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: default


    h3d.modeler.layers.add_layer("GND", "signal", thickness="0", isnegative=True)
    h3d.modeler.layers.add_layer("diel", "dielectric", thickness="0.2mm", material="FR4_epoxy")
    h3d.modeler.layers.add_layer("TOP", "signal", thickness="0.035mm", elevation="0.2mm")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.LayerStackup.Layer object at 0x000001FD9887FBB0>



.. GENERATED FROM PYTHON SOURCE LINES 53-56

Create signal net and ground planes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a signal net and ground planes.

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default


    h3d.modeler.create_line("TOP", [[0, 0], ["len", 0]], lw="w1", netname="microstrip", name="microstrip")
    h3d.modeler.create_rectangle("TOP", [0, "-w1/2-sp"], ["len", "-w1/2-sp-20mm"])
    h3d.modeler.create_rectangle("TOP", [0, "w1/2+sp"], ["len", "w1/2+sp+20mm"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'NewObject_AC5J2Y'



.. GENERATED FROM PYTHON SOURCE LINES 62-65

Create vias
~~~~~~~~~~~
Create vias with parametric positions.

.. GENERATED FROM PYTHON SOURCE LINES 65-73

.. code-block:: default


    h3d.modeler.create_via(x="viatovia", y="-viatotrace", name="via1")
    h3d.modeler.create_via(x="viatovia", y="viatotrace", name="via2")
    h3d.modeler.create_via(x="2*viatovia", y="-viatotrace")
    h3d.modeler.create_via(x="2*viatovia", y="viatotrace")
    h3d.modeler.create_via(x="3*viatovia", y="-viatotrace")
    h3d.modeler.create_via(x="3*viatovia", y="viatotrace")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'via_Y0FOFB'



.. GENERATED FROM PYTHON SOURCE LINES 74-77

Create circuit ports
~~~~~~~~~~~~~~~~~~~~
Create circuit ports.

.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: default


    h3d.create_edge_port("microstrip", 0)
    h3d.create_edge_port("microstrip", 2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.Boundary.BoundaryObject3dLayout object at 0x000001FD9C2107F0>



.. GENERATED FROM PYTHON SOURCE LINES 82-85

Create setup and sweep
~~~~~~~~~~~~~~~~~~~~~~
Create a setup and a sweep.

.. GENERATED FROM PYTHON SOURCE LINES 85-101

.. code-block:: default


    setup = h3d.create_setup()
    h3d.create_linear_count_sweep(
        setupname=setup.name,
        unit="GHz",
        freqstart=3,
        freqstop=7,
        num_of_freq_points=1001,
        sweepname="sweep1",
        sweep_type="Interpolating",
        interpolation_tol_percent=1,
        interpolation_max_solutions=255,
        save_fields=False,
        use_q3d_for_dc=False,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.SetupTemplates.SweepHFSS3DLayout object at 0x000001FD9C2105B0>



.. GENERATED FROM PYTHON SOURCE LINES 102-105

Solve and plot results
~~~~~~~~~~~~~~~~~~~~~~
Solve and plot the results.

.. GENERATED FROM PYTHON SOURCE LINES 105-110

.. code-block:: default


    h3d.analyze_nominal()
    traces = h3d.get_traces_for_plot(first_element_filter="Port1")
    h3d.post.create_report(traces, families_dict=h3d.available_variations.nominal_w_values_dict)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    False



.. GENERATED FROM PYTHON SOURCE LINES 111-114

Create report outside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a report using Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 114-121

.. code-block:: default


    traces = h3d.get_traces_for_plot(first_element_filter="Port1", category="S")

    solutions = h3d.post.get_solution_data(expressions=traces)
    solutions.plot(math_formula="db20")





.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS3DLayout_Via_001.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS3DLayout_Via_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 122-127

Close AEDT
~~~~~~~~~~
After the simulation completes, you can close AEDT or release it using the
:func:`pyaedt.Desktop.release_desktop` method.
All methods provide for saving the project before closing.

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default


    if os.name != "posix":
        h3d.release_desktop()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  10.024 seconds)


.. _sphx_glr_download_examples_02-HFSS_HFSS3DLayout_Via.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: HFSS3DLayout_Via.py <HFSS3DLayout_Via.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: HFSS3DLayout_Via.ipynb <HFSS3DLayout_Via.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
